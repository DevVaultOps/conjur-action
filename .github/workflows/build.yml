name: release
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:  
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    #tags: [ 'v*.*.*' ]
  #pull_request:
    #branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
   runs-on: self-hosted
   permissions:
      id-token: 'write'
      contents: 'read'
   steps:
      - name: Check CONJUR_AUTHN_ID_TEST_GITHUB value
        run: |
          if [ "$CONJUR_AUTHN_ID" == "/data/apjisppaul03/devops/github-apps/release" ]; then
            echo "CONJUR_AUTHN_ID is correct."
          else
            echo "Error: CONJUR_AUTHN_ID is incorrect or not set properly."
            exit 1
          fi
          env:
            CONJUR_AUTHN_ID: ${{ secrets.CONJUR_AUTHN_ID }}
      - name: Import Secrets using CyberArk Conjur Secret Fetcher
        uses: cyberark/conjur-action@v2.0.12
        with:
          url: ${{ secrets.CONJUR_URL }}
          account: conjur
          authn_id: ${{ secrets.CONJUR_AUTHN_ID_TEST_GITHUB }}
          secrets: data/vault/github/gh_cr/username;data/vault/github/gh_cr/password|DEV_PASSWORD
      - name: Validate The Retrieved Secret
        run: |
          if [ "$DEV_PASSWORD" == "asdf" ]; then
            echo "DEV_PASSWORD is correct."
          else
            echo "Error: DEV_PASSWORD is incorrect or not set properly."
            exit 1
          fi
      - name: Output Run ID
        run: echo ${{ github.run_id }}
      - name: Output Run Number
        run: echo ${{ github.run_number }}
      - name: Output Workflow
        run: echo ${{ github.workflow }}
      - name: echo jwt req token
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}
      - name: echo jwt req token url
        run: echo ${ACTIONS_ID_TOKEN_REQUEST_URL}  
      - name: fetch token  
        id: get_token
        run: |
          echo "Fetching OIDC token..."
          TOKEN=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}")
          echo "OIDC Token: $TOKEN"              
    
          HEADER=$(echo $TOKEN | cut -d. -f1)
          PAYLOAD=$(echo $TOKEN | cut -d. -f2)
          SIG=$(echo $TOKEN | cut -d. -f3)

          echo "JWT HEADER: $HEADER"
          echo "JWT PAYLOAD: $PAYLOAD"
          echo "JWT SIG: $SIG"

      - name: Debug OIDC Claims
        uses: github/actions-oidc-debugger@main
        with:
          audience: '${{ github.server_url }}/${{ github.repository_owner }}'

